generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(cuid()) @map("_id")
  name                 String
  email                String    @unique
  emailVerified        Boolean   @default(false)
  image                String?
  botName              String?   @default("Vorcle Bot")
  botImageUrl          String?
  calendarConnected    Boolean   @default(false)
  slackUserId          String?
  slackTeamId          String?
  slackConnected       Boolean   @default(false)
  preferredChannelId   String?
  preferredChannelName String?
  meetingsThisMonth    Int       @default(0)
  chatMessagesToday    Int       @default(0)
  lastUsageReset       DateTime? @default(now())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  meetings             Meeting[]
  accounts             Account[]
  sessions             Session[]
  subscriptions        Subscription?

  @@map("user")
}

model Subscription {
  id                  String             @id @default(cuid()) @map("_id")
  status              SubscriptionStatus @default(INACTIVE)
  planName            String             @default("FREE")
  polarId             String?            @unique
  customerId          String?
  externalUserId      String?
  productId           String?
  priceId             String?
  amount              Int?
  currency            String?
  cancelAtPeriodEnd   Boolean?           @default(false)
  currentPeriodStart  DateTime?
  currentPeriodEnd    DateTime?
  gracePeriodEndsAt   DateTime?
  userId              String             @unique
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  canceledAt          DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  checkouts           Checkout[]

  @@map("subscription")
} 

model Checkout {
  id             String        @id @default(cuid()) @map("_id")
  polarId        String        @unique
  userId         String?
  customerId     String?
  status         String
  productId      String
  productName    String?
  amount         Int?
  currency       String?
  successUrl     String?
  url            String?
  expiresAt      DateTime?
  subscriptionId String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [polarId])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("checkout")
}

model WebhookEvent {
  id        String   @id @default(cuid()) @map("_id")
  eventType String
  polarId   String?
  processed Boolean  @default(false)
  payload   Json? 
  error     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("webhook_event")
}

model SlackInstallation {
  id            String   @id @default(cuid()) @map("_id")
  teamId        String   @unique
  teamName      String
  botToken      String   @db.Text
  installedBy   String
  installerName String?
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("slack_installation")
}

model Meeting {
  id              String    @id @default(cuid()) @map("_id")
  title           String
  description     String?
  meetingUrl      String?
  startTime       DateTime
  endTime         DateTime
  attendees       Json?
  calendarEventId String?   @unique
  isFromCalendar  Boolean   @default(false)
  botScheduled    Boolean   @default(true)
  botSent         Boolean   @default(false)
  botId           String?
  botJoinedAt     DateTime?
  meetingEnded    Boolean   @default(false)
  transcriptReady Boolean   @default(false)
  transcript      Json?
  recordingUrl    String?
  speakers        Json?
  summary         String?
  actionItems     Json?
  processed       Boolean   @default(false)
  processedAt     DateTime?
  emailSent       Boolean   @default(false)
  emailSentAt     DateTime?
  ragProcessed    Boolean   @default(false)
  ragProcessedAt  DateTime?
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  TranscriptChunk TranscriptChunk[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("meeting")
}

model UserIntegration {
  id             String    @id @default(cuid()) @map("_id")
  userId         String
  provider       String
  accessToken    String    @db.Text
  refreshToken   String?   @db.Text
  tokenExpiresAt DateTime?
  boardId        String?
  boardName      String?
  projectId      String?
  projectName    String?
  workspaceId    String?
  domain         String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([userId, provider])
  @@map("user_integration")
}

model TranscriptChunk {
  id          String   @id @default(cuid()) @map("_id")
  chunkIndex  Int
  content     String   @db.Text
  speakerName String?
  vectorId    String?
  meetingId   String
  meeting     Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@map("transcript_chunk")
}

model Account {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Session {
  id             String   @id @default(cuid()) @map("_id")
  userId         String
  token          String
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

enum SubscriptionPlan {
  FREE
  PRO
  BUSINESS
  ENTERPRISE
}

enum SubscriptionStatus {
  INACTIVE
  INCOMPLETE
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}
